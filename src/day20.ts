/* eslint-disable no-console */
// AoC Day 20 Challenge

// eslint-disable-next-line import/no-unassigned-import
import "./extensions";

import { createMap2d, Map2d, mapFromLines } from "./map2d";

export { dayTwentyPartOne, dayTwentyPartTwo };

/*
// Test values
const algorithmString =

const lines: string[] = ["#..#.", "#....", "##..#", "..#..", "..###"];
*/

// Real values
const algorithmString =

const lines: string[] = [
    "#.#...#..##..########...##....#.#.###.#.##.##...#..###.#.##.#.#..#..##..###....#..##.##....#...##.#.",
    ".###.#..#.#.#..##.##.#.####..##.#...#.###...#.#....#.#.###..#.#..###...##..######..#..#..#####......",
    "##.#.###.#.#..###...##..###.#.#..#....#...#..#.....##..###.###.######.####.#.#...##.#.##.####..#.##.",
    "...#..##...########.##..#..#...#...#...##.#..#.#..#.##..##.#..#...#.##........#.#.#.######..#..#.#..",
    ".....###....#.##....####..#.#.#.###.###.##.#.#.###..#..##.#...##.###..#.##..##.##..#.#....####..#.#.",
    "..####..###.#..###.#.....#..#..#....#########.####.#..#.##.##..#....#.....#.#.#..#.#..#..###.##...##",
    "###.#..#####...####.##...####...#.#####.##...##.####.###...###...##...#..#.#.######.##....#....##..#",
    "...#...#.#.###..#.#..#.#.####..####.#..#...#...#.#...#...#.....##..#.....#.#.#....#####.##..#.#..###",
    "##...##..###..#..#...#..#..#.####...#.##.###.#.#....#..##....#.....#.##.###.###.#.....#####.#...#...",
    ".##.#..#..#..#.##.#.##.###.###....##.#.#...#####.#..##..#....###..#.#...##.###.#..#.####..##..######",
    "#.#..####.###.#####.###.##....##..####.##.##.#########.........#.#.....####.##.....#.#...##.#....##.",
    ".#..#.#.#..#.#.#.#.#..###....##.#.##.#....#.##.#....#####.#..###...##......#..#.#.##..##..######..##",
    "..##.####.##.....#.#######..##.##...##.####.####.##...####..#.###....#..###..##..#.####....###..##..",
    "#.#....#...#.#.#..#.#..#...#####..#.#..###.#.##...#####.....##.#....#.#.##.#..#.#..###...#.#.#..#..#",
    "##.#.#..#.###.###.##.####....###.#.##.#.#.##...###.##.#.#...##.#.##..#.##.##.#.#....#.....#.#.###...",
    ".#.##.#....#.#.#.###.##..#######.###..#...#...#####.###.#.#.###..###...###.######.#.#....#...#####.#",
    "####..#..####.#......####..##...####...##.#.######.###.###.#.#.#.#....##.#######....##.#..####..##.#",
    "..##.#..###...##....##.###.#.#.#....#..##..###..##..##..#.####..#....#.#.####..#..##.#..#....#..##.#",
    ".#..#.#..##.###....#...####...##.##..#.#..##.##.##.###....##...##.....#.###......###..#.#..###....#.",
    "###.#...#.##...####.#.##.###..#.....##.#.#...#.#..###.##..###.#..#.#.#.#.#####.#.####.##..####..##..",
    ".....#.#..#.##...#..#.....#.###.##########.##.....#..####.##.##.###.##..#.##..#....#.#..##...###.#..",
    "#..#.##.#.#.#..#....##########.###..#.#...#.##...#####..#..##..#..####.......###..#..#.###..###.##.#",
    "###.#..##..##..####...#.####..##.######....#..#...#..##...#####.####.##.####...######..#..##...##..#",
    "..##.#####...#.##..###...###.#......#.#.######.#...####.####.##.##....##..##.#.#..####.#####.######.",
    "..##..#.#..###..#.....####..#.####.##.#.####.##.....####..##..#...###.#...###...#.#.#........##...#.",
    ".#.###.##.##.#.##.##..#.#.###...##..#..#..#.##.#.#..##.#.#.#.##....##....#.#......#....#..#....##.#.",
    "#####.#.###...###.#..#.##.###...###.##.##........#.###.#...##.###.#...###.##.##..#.##.###..####.###.",
    "#....####.#..#.###....##.#.##..##.....#..#...#...##.#..#.#...#..##.#..##..######.##..####.##...#.#..",
    "..#.#..#..##.##...##.###...#...###..#.##..#.#####..#.#.##.#######.##.#.#..##..####.....#####..#.#.##",
    "#.#.....#.#.##.##.##.##......#...##.##.###..#...#.#........##....#.#.....#.##.###....#..###..#..#.##",
    "..#.#.####..#.##...#.###.##....#.##.#########.###...##...##.#.#....#...#...##.....###.##.........#..",
    "###.##.#.#...#...##...##...##.##.#..#.#....##.#.##..#..##.#.##.##..#.#.####.###.#.##.##....#.###.##.",
    "###..#.######.#.###.##.###..##.#..######..###.....###......#.##..##..#.....##..##.##..#.#....##.##.#",
    "..##.#....#.........##.##.#.#..####..##.#......#....#...##.#####..##........##....#.###...###.###..#",
    "##...###.#.#..#.#..##.#.##.####....###....##.#####.##....#.##...##..#.....#....#...######..#.#...###",
    ".##.##.#..###.#.###.#.#.###...####.##.#.#.#.####.#...####.##..###.#...##..##.####..###.#.#..##..##..",
    "#..#...#####.##...#...##..###.#.#....#.#...#########..##.....##.#.#...###......#.##.########..#.##..",
    "##..##.##.......##..##........###.#....#.####.#..#.#.###....#.#.#.#.###.#.#..##..##...##.#.....#....",
    "....#..##...#####...##..#.###....##.##..##.#....#....#..#.#...#.#####...#..##.#.##...#.#...####...##",
    "..##..####.##....#.###.####...###.#.##.##...#..##..#.###.###.#.#.######.#..#####......##..#.###.#.#.",
    "#..#.#....#...###.#.#....##.###..#....##..####.#..#.#####.#.###.######...#..###.##..####.#...##.#..#",
    "..#.##.##.#.##........#..##.....#.#.#.#.##.##..#..##...#.##...#...#.##.###..###.....##..#....#.#..##",
    "###.##...##.#.#...##...####.###.#...####..###...#.##.#..#.#.###......#.#...###..#.####.##.#.#.####..",
    "#.#.##.##...#..##..#....#.##..##......###..###...####..##...###.#.##.##..##...####.#.....#.##.##...#",
    ".....#...#.##.#..#.##.#.####.#######......##.#..#...##..#...#.###.###.#.##.#.##..#.##.##.#..#.###..#",
    "####...#####..##....##.#####...#...#...##.....##..###..#...###..#...#...##.###..###.#####...##.#....",
    "#..###...###....#.#.#.######.###..####..#####...###..###..###....##.#.##..#.##..##..#.###.#####.....",
    "#.#.##.#.####..#####.###.#..#####.#..#.#.#..#.##....##.#.#.#.#.###.###..###...#####.#.##.#.#.#..#...",
    ".#.#...#..#.##.#..####..###.#..#.########.####......#...##..#####..#...#.#..###..#.#....####....#..#",
    "##.###.###..#..##.#..#...#..####..#.###..##....#.#...######.##....##...#....#.........####.#.###.#..",
    ".##..####.##.#.#..####...#.##..##.##..###...#.....##...#......#....##...#####..#####.#.#.#...#..##..",
    ".#...##.#.###.#.#.##....###..###.##.#.##.....###.####.......#.#.#.#....##.#..#..#..#####..#....#.#.#",
    "..#.##.###.###.................###.#...#...#.##.#.###..###..#..##..#.#..###..##.#.##.#.##.##.##.#...",
    "###.#...#..#...###.......###.#.#..#####.####.#..#...##...#####..#........###.#..#.#######..####.#.##",
    "...#.##.#####.#...##.###...##.#..#..##.##.##..#.#.#.#.###...#.##..#.##.##.#.#.##...##.###....#..#.##",
    "##.#.####.##.#..#####.#.#...######.###.#.#.##.##...##.#.##.#..#...##.##.#..#...#..#..#..#..#.##.#...",
    "#.#######.#..#.##..#..#.#..#..####....#.#..#..#...#.....####...#..#.......#..#...##..##.##.##..#.#..",
    "..##.#.####.#.#.#......########..#..#.....###.#.####.#..#####.##..####.#.###....##.#.#..#.##..#####.",
    ".##.#.##.#.#..#.#.#.#...#########...#####..#...###.#.##..##.#..##...###.##.#.#.#.#...####.#.#.####.#",
    ".#####.####..##.##....#.#.#...######.#.#..#.#.#....#.#....##.#..#.###..#..#.####...###..##.#.#.#.#..",
    ".##..#..###.######.#.#.#..######.##..#..#.######....###.##..#####.....####.#.#.#...##.###.#...##.##.",
    ".#.####..##.#..#.#..#.###.##.#....##..#.#..#####.##.##...#..####..###..#........#.##..##.####...###.",
    "..##..###.#.###.#...##.#.##.##.#######..##.#....#.####.#...####...####.###.##.##...##.#..#.#....#..#",
    ".##..#.######..#.#.##.....######.#####......###.#....###.##.#.###.#..#.#.###.#.####...####.##.....##",
    ".####....#.##.##.#.#....#.##.#..#...##.....#..##......#..#######..#.##.###.#..#.###.####..###.#.#..#",
    "..#.##.#.#..##..####....#######.##...#.##.....#.#.##....#.###.#.#..#.###.#.....#.####.#.....##.#...#",
    "##...#.##..##.#.........#..#..#######.##.#..###.#.###..#.##.#..#...#..#..#.##.##.#..###.###...##.##.",
    "...#.#..###..#.##.#####.#.##...#.##..###.#...#...#.##....#####..#####....###..#.####.#...#.###.....#",
    "..#.####..#..#.#..#.######...##.##...##...#.#.#.....#..#...##..#.############.###.####....###..###..",
    "#.#...#.#.##..##..#.#..#...####.##.##.#.#.#.##..##.#.#.....#....#...#...#.###.#.#####..##.###...#..#",
    ".#....#.##..###.#..#.###.#..#.#..##..##.......########.#...#...#####.#...#..#..##.....#.##.....####.",
    "#.#####.#.##.###.#.#....#.#.###...##.#.....##..##..#.#####..#.#.##.#..###..##...#.#.##.#.#.....#.#..",
    "..###...#.#.......#.#......##.#..#.#.#.#.#...#.###.##...####....######......#...#####..###.##...#..#",
    "#..#...#..##..#...#...####.#...#....#####.#...#...#.#.....##...##..#...#....#..#####...#.....##...#.",
    "#.####.#...#...#..##...##....#...#.#.##.##.##...##..##.#..#..#.##.##.##.#.##......#.#...##.....#...#",
    ".#..####..###........#####...#....#.####..##..#####.##.###..#..###...##..##...##.....#..#.#.###.#...",
    ".#....#.####....#....##..#.#.######.#######.#.##.###.###...#.#....##..#..####.###.#....###...#.#....",
    "...###..##.#.##..#.#.#####.######.#..######.##...#.##.#..##.###.#.......#..#...#.###...##..####.##.#",
    "#....###....#..#####.#..#...###..##.##...##.###...#...#....#..#...#..####.#.####...#..##....#...#.##",
    "#.####.###...#..#.####...#..#.##.###.#.##.#....#..##.#.#...##.#..#.##.##..#####..#..#...###...#.####",
    "#.##.##..##.##......#.#.##...###.####.###.####.#...##...#.#...###..###.######.#####....###.####.#...",
    "##..#.###....#.#..###.#..##..###.#..##..#####.#.###..#.#...##.#.#.#.####....##...##....###.#.#.#..##",
    "...#.###.###..###.##...#.###.#.####.##..#.#..###...#..##.######.#.#..###..#.##...##.###....##.#...#.",
    "#..#.#..#.#..#.#.#.#.#..##..#....#..###.###.#...#.#####.#..#..#.#....#.#.#.#....##.##..#...##......#",
    "...#...##....#....#.##.######.#...#.....#.##..#....#..##.#.........###..#..#..#.##.##...#.#..#######",
    "##.##..#..#.#..#.#.######.##...####...#...#..#..##.#......#.#....#.###..#.###...#...#...#.##...###..",
    "#.####.#.##....##..###....#.##.#.##....####.#.#.##.#....#..#..###...#.....##.##....####..###........",
    "..#..##...##.#...#..#.#..###....##...#...####.....####....###..##..##..##.###..#.....######.........",
    ".###.###.##.#...#.##..##.#.##.#.#..#.#..###.#....###.#..##.###....#...#####.###..###.####..#.#...##.",
    "..##.#.#.####.#..#..###.##.#####.#.#....##..#.#.##..##..#...###.#...#...#...#...#..#..##.#...##...##",
    "......###..#####...##..##.#.....###.#...#..###..####..##..#..#####..##..#..##..####.#..#.........#..",
    "###............#.#.......###..#..##..#.#####.#.##.########.##..####.#.########..#.###.....#.####.#.#",
    ".#.....#....##..#.##..#...#.#.##.##..#.##...#.##.#..#......##.....##..##.#..##.###...###....#.##.###",
    "..#...###....##....#.#...###.###..##.##...#.#.#.#..#....###.#.##.....##.#..#.#######.#.###...###....",
    "##.#.#.#.#...####.##..#.#####..######..#.#...#.#.........#....##.....#....#.###....#.#.#..#...##....",
    ".......#.#.#..#....####.##.##.#.......#.#.###..#..#..#..##.#.#.##.#.##.#.#.#..##.#..###..#.###...##.",
    "..##.#.#..##.##...#..#..#..#..###..#.##..#.##..#..#....#....#.##.##.###.##.###..##.......######.###.",
    "##.#.#.#.#.#..###...###..####...##..##.###.#..#..####.#...###..#.##.##.#.#.###..###.#.#.#...###..#..",
    "..##...####......##..#..#..#...#...#..##...######.##......#.#.#....#.#.#.#..#..##.#...#.########...#",
    "####.##.#.#.####..#.#.##.#..#...#.#.##.#....#..#.####.#.#####.###..##.#.####...##.###.#.#....#.#####"
];

const offsetX: number[] = [-1, 0, 1, -1, 0, 1, -1, 0, 1];
const offsetY: number[] = [-1, -1, -1, 0, 0, 0, 1, 1, 1];

function computeAlgorithmIndex(map: Map2d, x: number, y: number): number {
    let numberString = "";
    for (let i = 0; i < offsetX.length; i++) {
        numberString += map.getValue(x + offsetX[i], y + offsetY[i])?.toString();
    }
    return parseInt(numberString, 2);
}

function expandMap2d(map: Map2d, getOutValue: () => number, initialValue: number, border: number): Map2d {
    const newWidth = map.width + 2 * border;
    const newHeight = map.height + 2 * border;
    const newMap = new Map2d(newWidth, newHeight, getOutValue, initialValue);
    for (let y = 0; y < map.height; y++) {
        for (let x = 0; x < map.width; x++) {
            const value = map.getValue(x, y);
            if (value === undefined) {
                throw new Error("value undefined");
            }
            newMap.setValue(x + border, y + border, value);
        }
    }
    return newMap;
}

function dayTwentyPartOne(): void {
    const algorithm: number[] = algorithmString.split("").map((value: string) => {
        return value === "." ? 0 : 1;
    });
    const originalImage: Map2d = mapFromLines(
        lines.map((line: string) => {
            return line
                .split("")
                .map((character: string) => {
                    return character === "." ? "0" : "1";
                })
                .join("");
        })
    );

    let target = originalImage;
    const border = 1;
    const getInitialValue = function (localPass: number): number {
        return localPass === 0 ? 0 : 1;
    };

    for (let pass = 0; pass < 2; pass++) {
        const source = expandMap2d(
            target,
            () => {
                return getInitialValue(pass);
            },
            getInitialValue(pass),
            border
        );
        source.toLog();
        target = new Map2d(
            source.width,
            source.height,
            () => {
                return getInitialValue(pass + 1);
            },
            getInitialValue(pass + 1)
        );
        for (let y = 0; y < source.height; y++) {
            for (let x = 0; x < source.width; x++) {
                const index = computeAlgorithmIndex(source, x, y);
                target.setValue(x, y, algorithm[index]);
            }
        }
        target.toLog();
    }

    console.log(
        `Count: ${target.values.reduce((count: number, value: number) => {
            return count + (value > 0 ? 1 : 0);
        }, 0)}`
    );
}

function dayTwentyPartTwo(): void {
    const algorithm: number[] = algorithmString.split("").map((value: string) => {
        return value === "." ? 0 : 1;
    });
    const originalImage: Map2d = mapFromLines(
        lines.map((line: string) => {
            return line
                .split("")
                .map((character: string) => {
                    return character === "." ? "0" : "1";
                })
                .join("");
        })
    );

    let target = originalImage;
    const border = 1;
    const getInitialValue = function (localPass: number): number {
        return localPass % 2 === 0 ? 0 : 1;
    };

    for (let pass = 0; pass < 50; pass++) {
        const source = expandMap2d(
            target,
            () => {
                return getInitialValue(pass);
            },
            getInitialValue(pass),
            border
        );
        source.toLog();
        target = new Map2d(
            source.width,
            source.height,
            () => {
                return getInitialValue(pass + 1);
            },
            getInitialValue(pass + 1)
        );
        for (let y = 0; y < source.height; y++) {
            for (let x = 0; x < source.width; x++) {
                const index = computeAlgorithmIndex(source, x, y);
                target.setValue(x, y, algorithm[index]);
            }
        }
        target.toLog();
    }

    console.log(
        `Count: ${target.values.reduce((count: number, value: number) => {
            return count + (value > 0 ? 1 : 0);
        }, 0)}`
    );
}
