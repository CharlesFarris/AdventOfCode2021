/* eslint-disable no-console */
// AoC Day 24 Challenge

import { Alu } from "./alu";

export { dayTwentyFourPartOne, dayTwentyFourPartTwo };

/*
// Test values
const program1: string[] = ["inp x", "mul x -1"];
const queue1 : number[] = [2];
*/

// Real values
const monad: string[] = [
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 1",
    "add x 11",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 14",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 1",
    "add x 14",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 6",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 1",
    "add x 15",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 6",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 1",
    "add x 13",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 13",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 26",
    "add x -12",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 8",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 1",
    "add x 10",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 8",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 26",
    "add x -15",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 7",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 1",
    "add x 13",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 10",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 1",
    "add x 10",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 8",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 26",
    "add x -13",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 12",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 26",
    "add x -13",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 10",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 26",
    "add x -14",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 8",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 26",
    "add x -2",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 8",
    "mul y x",
    "add z y",
    "inp w",
    "mul x 0",
    "add x z",
    "mod x 26",
    "div z 26",
    "add x -9",
    "eql x w",
    "eql x 0",
    "mul y 0",
    "add y 25",
    "mul y x",
    "add y 1",
    "mul z y",
    "mul y 0",
    "add y w",
    "add y 7",
    "mul y x",
    "add z y"
];

function dayTwentyFourPartOne(): void {
    const alu = new Alu();
    alu.toLog(console);

    const instructions = alu.compile(monad);

    const digits = 14;

    for (let i = 99999999999999; i > 0; i--) {
        const queue = i
            .toString()
            .split("")
            .map((c: string) => {
                return parseInt(c);
            });
        if (queue.indexOf(0) !== -1) {
            continue;
        }
        console.log(i);
        alu.execute(instructions, queue);
        if (alu.z() === 0) {
            console.log(i);
            break;
        }
    }
}

function dayTwentyFourPartTwo(): void {
    // todo
}
